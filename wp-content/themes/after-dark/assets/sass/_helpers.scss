// Define all utility classes here

.hidden {
  display: none;
}

.shown {
  display: block
}

.invisible {
  visibility: hidden;
}

.visible {
  visibility: visible;
}

@each $breakpoint, $properties in $breakpoints {
  $width: map-get($properties, width);
  $gutter: map-get($properties, gutter);

  @for $i from 1 through 12 {
    @if $breakpoint == 'xs' {
      .column-#{$i}-#{$breakpoint} {
        width: calc((100vw/12) * #{$i} - #{$gutter} - #{$space-horizontal} * 2);
        margin-right: $gutter * 0.5;
        margin-left: $gutter * 0.5;
      }
    }

    @if $breakpoint == 'sm' or $breakpoint == 'md' {
      @include respond-above($breakpoint) {
        .column-#{$i}-#{$breakpoint} {
          width: calc((100vw/12) * #{$i} - #{$gutter} - #{$space-horizontal} * 2);
          margin-right: $gutter * 0.5;
          margin-left: $gutter * 0.5;
        }
      }
    }

    @if $breakpoint == 'lg' or $breakpoint == 'xl' {
      @include respond-above($breakpoint) {
        .column-#{$i}-#{$breakpoint} {
          width: calc((#{$wrapper-width}/12) * #{$i} - #{$gutter});
          margin-right: $gutter * 0.5;
          margin-left: $gutter * 0.5;
        }
      }
    }
  }
}

@each $breakpoint, $properties in $breakpoints {
  $width: map-get($properties, width);
  $gutter: map-get($properties, gutter);

  @for $i from 1 through 11 {
    @if $breakpoint == 'xs' {
      .column-move-#{$i}-#{$breakpoint} {
        margin-left: calc((100vw/12) * #{$i} + #{$gutter} - #{$space-horizontal} * 2);
      }
    }

    @if $breakpoint == 'sm' or $breakpoint == 'md' {
      @include respond-above($breakpoint) {
        .column-move-#{$i}-#{$breakpoint} {
          margin-left: calc((100vw/12) * #{$i} + #{$gutter} - #{$space-horizontal} * 2);
        }
      }
    }

    @if $breakpoint == 'lg' or $breakpoint == 'xl' {
      @include respond-above($breakpoint) {
        .column-move-#{$i}-#{$breakpoint} {
          margin-left: calc((#{$wrapper-width}/12) * #{$i} + #{$gutter});
        }
      }
    }
  }

  @if $breakpoint == 'xs' {
    .column-move-center-#{$breakpoint} {
      margin-right: auto;
      margin-left: auto;
    }

    .column-move-cancel-#{$breakpoint} {
      margin-right: $gutter * 0.5;
      margin-left: $gutter * 0.5;
    }
  } @else {
    @include respond-above($breakpoint) {
      .column-move-center-#{$breakpoint} {
        margin-right: auto;
        margin-left: auto;
      }

      .column-move-cancel-#{$breakpoint} {
        margin-right: $gutter * 0.5;
        margin-left: $gutter * 0.5;
      }
    }
  }
}

.text-large {
  font-size: $default-heading-size;
  font-weight: 400;

  @include respond-above(sm) {
    font-size: $default-large-text-size;
  }
}

.text-emphasis,
.text-data {
  font-weight: $default-bold-weight;
}

.text-right {
  text-align: right;
}

.text-left {
  text-align: left;
}

.text-center {
  text-align: center;
}

.image-center-fit {
  width: 100%;
  height: 100%;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  object-fit: cover;
}

.list-links {
  @include flexbox((
    display: inline-flex,
    flex-direction: row
  ));

  > li {
    padding-right: $space-horizontal * 0.5;
    padding-left: $space-horizontal * 0.5;
    border-right: 1px solid $color-foreground;

    &:first-child {
      padding-left: 0;
    }

    &:last-child {
      padding-right: 0;
      border-right: 0;
    }
  }
}

.list-posts > li {
  margin-top: $space-vertical * 2;
  margin-bottom: $space-vertical * 2;

  &.list-item-post > a {
    color: $color-foreground;

    &:hover {
      color: $color-action;
    }
  }

  &::after {
    content: url('assets/images/right-arrow-black.svg');
    vertical-align: middle;
    margin-left: $space-horizontal;
  }
}

.input-text {
  font-size: $default-body-size;
  padding-top: 0;
  padding-bottom: 0;
  border: none;

  &::placeholder {
    color: $color-secondary;
    transition: color 0.25s ease-in;
  }

  &:active,
  &:focus-visible {
    outline: none;

    &::placeholder {
      color: $color-foreground;
      transition: color 0.25s ease-in;
    }
  }
}
